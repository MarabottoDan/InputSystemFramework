//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""23df4ba5-1ac7-4210-9423-284cd6ee20a2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""20c92ec9-b5f6-49ef-b030-f31ec0d16a2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickupAndDropBomb"",
                    ""type"": ""Button"",
                    ""id"": ""3b654c1d-d40d-4fa1-8e64-d707bd10182f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DetonateBomb"",
                    ""type"": ""Button"",
                    ""id"": ""a4d7c041-2c5a-4751-8355-5f1e0ff16994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HackCameras"",
                    ""type"": ""Button"",
                    ""id"": ""94f4d276-1114-4c5e-a68a-a94a647d22c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""ef1d1373-9a92-4a8f-a71d-9ea561ecaece"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d4dcfee9-0b6f-40d2-9fb2-21fd0df668e7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb2768e0-55ca-4f06-ab4d-6ae2eb1195ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""799e009a-d876-4e96-8c45-9f431d316923"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb41399a-202e-43f3-b82a-8577e66394f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""854d47a3-1f0a-40fe-8ffa-b471cb21ba3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8956b48d-70e1-46ef-8bbb-609e30a9e843"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickupAndDropBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1990260-b8ae-482f-b682-741e016e3aa1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DetonateBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de1e494-74cd-4b31-bdf9-30e091b1f547"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HackCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a12cf0-bfb3-4cc5-9854-8fd2bca9ea63"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=1),Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""7c4073da-36fc-480e-b567-3e2ca7c53a4f"",
            ""actions"": [
                {
                    ""name"": ""ExitMode"",
                    ""type"": ""Button"",
                    ""id"": ""5b7eb061-f5f6-45f2-b154-f9ab4a053630"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""021db4de-fdc4-43f1-a733-d67a3a2fc7ed"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AscendDescend"",
                    ""type"": ""Button"",
                    ""id"": ""c69f98a5-8782-4158-a281-df740c9f42f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""9933ef13-82c1-4c0b-bea0-b8e31e691058"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""fde1790a-6e23-41b2-854c-77c8d3920285"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0937d86f-9edc-438c-9f44-6d87bdc8f52b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2e617736-f7f9-4c63-9219-565022961054"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""231ff7e7-4d29-4295-95d3-cd78a01229a1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8fa391ca-7b54-46d9-9f3e-80dbb3824fb7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""52a720b4-47b5-4540-afb9-d150a03f953f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AscendDescend"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f6d5f009-ae4a-4a3b-a9ff-59325fc72940"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AscendDescend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""99847c56-89ea-4a50-b917-5422f3d9f776"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AscendDescend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0e188446-107e-4be0-bec4-ed87107b02ba"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f7a56b53-01a9-47e9-b1f6-dd66d19377b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c93dda71-1c26-43c6-91fb-8a978e6f499d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4d1f73e1-defd-4838-b573-fb84b30db452"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""efe45b4c-6db1-4d70-8143-d11fc3d0771c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6d9efa31-6d3d-44f2-bffd-2cce9e3d6650"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""884b0e1d-3d72-4050-9493-5d10ec6d87ef"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""07f0e812-128f-4e50-b5d2-b9addff57a04"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LiftUp"",
                    ""type"": ""Button"",
                    ""id"": ""f6e26a87-dece-4c0b-b4b4-b88fdc540f52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LiftDown"",
                    ""type"": ""Button"",
                    ""id"": ""e366b6d8-1a1e-4e4c-ba3f-b4756d7f2db0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitDriveMode"",
                    ""type"": ""Button"",
                    ""id"": ""1c871264-e58e-405c-9dd9-a694afc65d5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""07e54d80-84cb-4cf6-b426-97c253199745"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2a23698a-92a2-4d99-9f5f-ea28bb5be44a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""172a112f-2652-454d-aef6-46cf9568ac66"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""232c4b28-6f72-49d5-9a4a-b27e1ca60afa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""32453c09-6391-4228-ab68-23dc456d90b8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95389bc8-68b3-4243-bed8-01bf13d2ec84"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf9c3cc-5514-474b-8e53-108dd9871bc3"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""791847a7-c705-4c60-ada7-6e689ee88ea6"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitDriveMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_PickupAndDropBomb = m_Player.FindAction("PickupAndDropBomb", throwIfNotFound: true);
        m_Player_DetonateBomb = m_Player.FindAction("DetonateBomb", throwIfNotFound: true);
        m_Player_HackCameras = m_Player.FindAction("HackCameras", throwIfNotFound: true);
        m_Player_Punch = m_Player.FindAction("Punch", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_ExitMode = m_Drone.FindAction("ExitMode", throwIfNotFound: true);
        m_Drone_Rotate = m_Drone.FindAction("Rotate", throwIfNotFound: true);
        m_Drone_AscendDescend = m_Drone.FindAction("AscendDescend", throwIfNotFound: true);
        m_Drone_Tilt = m_Drone.FindAction("Tilt", throwIfNotFound: true);
        m_Drone_Thrust = m_Drone.FindAction("Thrust", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_Move = m_Forklift.FindAction("Move", throwIfNotFound: true);
        m_Forklift_LiftUp = m_Forklift.FindAction("LiftUp", throwIfNotFound: true);
        m_Forklift_LiftDown = m_Forklift.FindAction("LiftDown", throwIfNotFound: true);
        m_Forklift_ExitDriveMode = m_Forklift.FindAction("ExitDriveMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_PickupAndDropBomb;
    private readonly InputAction m_Player_DetonateBomb;
    private readonly InputAction m_Player_HackCameras;
    private readonly InputAction m_Player_Punch;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @PickupAndDropBomb => m_Wrapper.m_Player_PickupAndDropBomb;
        public InputAction @DetonateBomb => m_Wrapper.m_Player_DetonateBomb;
        public InputAction @HackCameras => m_Wrapper.m_Player_HackCameras;
        public InputAction @Punch => m_Wrapper.m_Player_Punch;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @PickupAndDropBomb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @PickupAndDropBomb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @PickupAndDropBomb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @DetonateBomb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @DetonateBomb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @DetonateBomb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @HackCameras.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
                @HackCameras.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
                @HackCameras.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
                @Punch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunch;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PickupAndDropBomb.started += instance.OnPickupAndDropBomb;
                @PickupAndDropBomb.performed += instance.OnPickupAndDropBomb;
                @PickupAndDropBomb.canceled += instance.OnPickupAndDropBomb;
                @DetonateBomb.started += instance.OnDetonateBomb;
                @DetonateBomb.performed += instance.OnDetonateBomb;
                @DetonateBomb.canceled += instance.OnDetonateBomb;
                @HackCameras.started += instance.OnHackCameras;
                @HackCameras.performed += instance.OnHackCameras;
                @HackCameras.canceled += instance.OnHackCameras;
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_ExitMode;
    private readonly InputAction m_Drone_Rotate;
    private readonly InputAction m_Drone_AscendDescend;
    private readonly InputAction m_Drone_Tilt;
    private readonly InputAction m_Drone_Thrust;
    public struct DroneActions
    {
        private @PlayerInputAction m_Wrapper;
        public DroneActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitMode => m_Wrapper.m_Drone_ExitMode;
        public InputAction @Rotate => m_Wrapper.m_Drone_Rotate;
        public InputAction @AscendDescend => m_Wrapper.m_Drone_AscendDescend;
        public InputAction @Tilt => m_Wrapper.m_Drone_Tilt;
        public InputAction @Thrust => m_Wrapper.m_Drone_Thrust;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @ExitMode.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitMode;
                @ExitMode.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitMode;
                @ExitMode.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnExitMode;
                @Rotate.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRotate;
                @AscendDescend.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @AscendDescend.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @AscendDescend.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnAscendDescend;
                @Tilt.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Tilt.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnTilt;
                @Thrust.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ExitMode.started += instance.OnExitMode;
                @ExitMode.performed += instance.OnExitMode;
                @ExitMode.canceled += instance.OnExitMode;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @AscendDescend.started += instance.OnAscendDescend;
                @AscendDescend.performed += instance.OnAscendDescend;
                @AscendDescend.canceled += instance.OnAscendDescend;
                @Tilt.started += instance.OnTilt;
                @Tilt.performed += instance.OnTilt;
                @Tilt.canceled += instance.OnTilt;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_Move;
    private readonly InputAction m_Forklift_LiftUp;
    private readonly InputAction m_Forklift_LiftDown;
    private readonly InputAction m_Forklift_ExitDriveMode;
    public struct ForkliftActions
    {
        private @PlayerInputAction m_Wrapper;
        public ForkliftActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Forklift_Move;
        public InputAction @LiftUp => m_Wrapper.m_Forklift_LiftUp;
        public InputAction @LiftDown => m_Wrapper.m_Forklift_LiftDown;
        public InputAction @ExitDriveMode => m_Wrapper.m_Forklift_ExitDriveMode;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @LiftUp.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftUp.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftUp.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftUp;
                @LiftDown.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
                @LiftDown.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
                @LiftDown.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnLiftDown;
                @ExitDriveMode.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriveMode;
                @ExitDriveMode.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriveMode;
                @ExitDriveMode.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnExitDriveMode;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @LiftUp.started += instance.OnLiftUp;
                @LiftUp.performed += instance.OnLiftUp;
                @LiftUp.canceled += instance.OnLiftUp;
                @LiftDown.started += instance.OnLiftDown;
                @LiftDown.performed += instance.OnLiftDown;
                @LiftDown.canceled += instance.OnLiftDown;
                @ExitDriveMode.started += instance.OnExitDriveMode;
                @ExitDriveMode.performed += instance.OnExitDriveMode;
                @ExitDriveMode.canceled += instance.OnExitDriveMode;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPickupAndDropBomb(InputAction.CallbackContext context);
        void OnDetonateBomb(InputAction.CallbackContext context);
        void OnHackCameras(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnExitMode(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnAscendDescend(InputAction.CallbackContext context);
        void OnTilt(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLiftUp(InputAction.CallbackContext context);
        void OnLiftDown(InputAction.CallbackContext context);
        void OnExitDriveMode(InputAction.CallbackContext context);
    }
}
