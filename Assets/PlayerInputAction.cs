//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""23df4ba5-1ac7-4210-9423-284cd6ee20a2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""20c92ec9-b5f6-49ef-b030-f31ec0d16a2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickupAndDropBomb"",
                    ""type"": ""Button"",
                    ""id"": ""3b654c1d-d40d-4fa1-8e64-d707bd10182f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DetonateBomb"",
                    ""type"": ""Button"",
                    ""id"": ""a4d7c041-2c5a-4751-8355-5f1e0ff16994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HackCameras"",
                    ""type"": ""Button"",
                    ""id"": ""94f4d276-1114-4c5e-a68a-a94a647d22c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d4dcfee9-0b6f-40d2-9fb2-21fd0df668e7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb2768e0-55ca-4f06-ab4d-6ae2eb1195ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""799e009a-d876-4e96-8c45-9f431d316923"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb41399a-202e-43f3-b82a-8577e66394f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""854d47a3-1f0a-40fe-8ffa-b471cb21ba3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8956b48d-70e1-46ef-8bbb-609e30a9e843"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickupAndDropBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1990260-b8ae-482f-b682-741e016e3aa1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DetonateBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de1e494-74cd-4b31-bdf9-30e091b1f547"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold(duration=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HackCameras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_PickupAndDropBomb = m_Player.FindAction("PickupAndDropBomb", throwIfNotFound: true);
        m_Player_DetonateBomb = m_Player.FindAction("DetonateBomb", throwIfNotFound: true);
        m_Player_HackCameras = m_Player.FindAction("HackCameras", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_PickupAndDropBomb;
    private readonly InputAction m_Player_DetonateBomb;
    private readonly InputAction m_Player_HackCameras;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @PickupAndDropBomb => m_Wrapper.m_Player_PickupAndDropBomb;
        public InputAction @DetonateBomb => m_Wrapper.m_Player_DetonateBomb;
        public InputAction @HackCameras => m_Wrapper.m_Player_HackCameras;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @PickupAndDropBomb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @PickupAndDropBomb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @PickupAndDropBomb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickupAndDropBomb;
                @DetonateBomb.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @DetonateBomb.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @DetonateBomb.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDetonateBomb;
                @HackCameras.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
                @HackCameras.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
                @HackCameras.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHackCameras;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PickupAndDropBomb.started += instance.OnPickupAndDropBomb;
                @PickupAndDropBomb.performed += instance.OnPickupAndDropBomb;
                @PickupAndDropBomb.canceled += instance.OnPickupAndDropBomb;
                @DetonateBomb.started += instance.OnDetonateBomb;
                @DetonateBomb.performed += instance.OnDetonateBomb;
                @DetonateBomb.canceled += instance.OnDetonateBomb;
                @HackCameras.started += instance.OnHackCameras;
                @HackCameras.performed += instance.OnHackCameras;
                @HackCameras.canceled += instance.OnHackCameras;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPickupAndDropBomb(InputAction.CallbackContext context);
        void OnDetonateBomb(InputAction.CallbackContext context);
        void OnHackCameras(InputAction.CallbackContext context);
    }
}
